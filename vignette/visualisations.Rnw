The visualisations in the following two subsections manipulate matrices of scores (such as coverages or intensities) in some way, such as clustering them, or summarising them by some defined grouping. The common interface for creating matrices of scores at regular distances from a reference point, such a TSS, is the \texttt{featureScores} function. The following example samples smoothed coverages between 5000 bases upstream of gene TSSs, and 1000 bases downstream of the TSS, at 1000 base intervals, in the PrEC and LNCaP immunoprecipitated samples. The scores are then subtracted from each other.

<<label = prostateFS>>=
prostateCvgs <- featureScores(samples.list[c("PrEC IP", "LNCaP IP")], gene.anno, up = 5000, down = 1000, freq = 1000, s.width = 500)
prostateCvgs
prostateCvgs@scores <- list(tables(prostateCvgs)[[2]] - tables(prostateCvgs)[[1]])
names(prostateCvgs) <- "LNCaP - PrEC"
@

This object will be used in the next few visualisation functions.

\subsection{Integrative analysis of epigenetics and gene expression}
\noindent Epigenomic data is often gathered with other data, such as gene expression. It may be of interest to see the profile of epigenetic enrichment at a variety of distances from TSSs, stratified by gene expression level. The \texttt{binPlots} function is a convenient way to look at these interactions.

<<label = binPlotsHeatmap, fig = TRUE, height = 7, width = 8>>=
binPlots(prostateCvgs, ordering = expr, ord.label = "Cancer-Normal t-stat",
         plot.type = "heatmap", n.bins = 50)
@

\noindent Enrichment levels (here, differential enrichment) are split into bins based on the moderated t-statistics for change in expression.  Signal for (differential) enrichment is averaged over genes in the bin and plotted as a heatmap.  As expected, the genes that are silenced in cancer exhibit higher levels of DNA methylation around their TSS, compared to normal cells.  This visualization can be represented as a lineplot, by setting \texttt{plot.type= "line"} (see below). \\

<<label = binPlotsLine, fig = TRUE, height = 7, width = 8>>=
binPlots(prostateCvgs, ordering = expr, ord.label = "Cancer-Normal t-stat",
         plot.type = "line", n.bins = 10)
@

This strategy is useful for determining the location (e.g. relative to TSS) signal most often occurs relative to expression and can be coupled to ranked gene expression levels, instead of differential expression.  These determined regions of interest relative to TSS can then be used in targeted analyses (e.g. \texttt{blocksStats}, see above).

\subsection{Gene Set Enrichment}

Sets of genes (e.g. genes disrupted in a certain type of cancer, or differentially expressed between experimental conditions) are ever-present in genomics research.  For such genes of interest, the profile of intensities or counts can be plotted versus the profile of randomly selected gene lists using the \texttt{profilePlots} function. In the following example, the DNA methylation profile of genes silenced in cancer is significantly different to random sets of genes.

<<label = profPlots, fig = TRUE, width = 8>>=
which.loss <- which(expr < -3)
profilePlots(prostateCvgs,
             gene.list = list(`Downregulated Genes` = which.loss),
             cols = "red")
@


\noindent The blue region forms the ``null" distribution that was created by sampling random gene lists of the same size as the user-specified gene list a number of times, as set by the \texttt{nSamples} parameter. By default, the null region is a between the 0.025 and 0.975 quantiles of the null distribution. In this example, it appears that the genes silenced in cancer have a significant gain of methylation 2000 bases either side of the TSSs, in comparison to random sets of other genes.
\ \\ \ \\

\subsection{Clustering epigenomic signals}

\texttt{clusterPlots} is another way to look at read depth at regular positions around a feature (e.g. TSS). The first step is to use \texttt{featureScores} to get the coverage tables, which essentially gives a list of coverage tables for the samples used. \texttt{clusterPlots} is then called, which does k-means clustering, or if the user wants to use their own clustering algorithm, the cluster ID of each feature can be passed in. In any case, the features are grouped by their cluster memberships and plotted as either a heatmap with one row for every feature, or a set of lineplots showing the average coverage of all features belonging to each cluster. If gene expression data is also available, it can be plotted alongside the heatmaps.

<<label=cluPlots>>=
cvgs <- featureScores(H1samples[1:3], gene.anno, up = 5000, down = 2000, dist = "base",
                      freq = 200, s.width = 500)
@

<<label=cluPlots2, echo=FALSE>>=
png("clusterPlot.png", height = 1000, width = 2500, pointsize = 22)
@

<<label=cluPlots3>>=
cp <- clusterPlots(cvgs, scale = function(x) sqrt(x), plot.type = "heatmap",
             t.name = "H1 Cells", n.clusters = 10)
@

<<label=cluPlots3, echo=FALSE>>=
dev.off()
@

Here, we have scaled the signal using the square root transformation.  If you don't specify this, no scaling is done.

\begin{figure}[!h]
    \begin{center}
        \includegraphics[height=0.48\textheight, width = 1.1\textwidth]{clusterPlot.png}
    \end{center}
\end{figure}

Note that we have saved the output of \texttt{clusterPlots} (a \texttt{ClusteredCoverageList} object), which can be plotted in alternative ways, such as line plots: 

<<label=cluPlots3, echo=TRUE, fig=TRUE, width=8>>=
table(clusters(cp))
clusterPlots(cp, plot.type = "line", t.name = "H1 Cells")
@

Also, this allows users to do there own clustering and use \texttt{clusterPlots} for the plotting, or to extract the cluster identifiers for downstream analyses (e.g. functional category analysis).  Furthermore, in addition to specifying a vector of expression values and plotting it alongside the clustered epigenetic signal, users can give an additional vector in the \texttt{sort.data} argument to sort on within a cluster (e.g. gene length, CpG density, etc.).
